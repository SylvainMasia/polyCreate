/**
 */
package fr.univcotedazur.webots.polycreate.provider;

import fr.univcotedazur.webots.polycreate.util.PolycreateAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PolycreateItemProviderAdapterFactory extends PolycreateAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PolycreateItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.Mission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissionItemProvider missionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.Mission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissionAdapter() {
		if (missionItemProvider == null) {
			missionItemProvider = new MissionItemProvider(this);
		}

		return missionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.LogicalAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalActionItemProvider logicalActionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.LogicalAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalActionAdapter() {
		if (logicalActionItemProvider == null) {
			logicalActionItemProvider = new LogicalActionItemProvider(this);
		}

		return logicalActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.AlternativeSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlternativeSequenceItemProvider alternativeSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.AlternativeSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlternativeSequenceAdapter() {
		if (alternativeSequenceItemProvider == null) {
			alternativeSequenceItemProvider = new AlternativeSequenceItemProvider(this);
		}

		return alternativeSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.Rotate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RotateItemProvider rotateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.Rotate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRotateAdapter() {
		if (rotateItemProvider == null) {
			rotateItemProvider = new RotateItemProvider(this);
		}

		return rotateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.MoveForward} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveForwardItemProvider moveForwardItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.MoveForward}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveForwardAdapter() {
		if (moveForwardItemProvider == null) {
			moveForwardItemProvider = new MoveForwardItemProvider(this);
		}

		return moveForwardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.Grab} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GrabItemProvider grabItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.Grab}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGrabAdapter() {
		if (grabItemProvider == null) {
			grabItemProvider = new GrabItemProvider(this);
		}

		return grabItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.Release} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReleaseItemProvider releaseItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.Release}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReleaseAdapter() {
		if (releaseItemProvider == null) {
			releaseItemProvider = new ReleaseItemProvider(this);
		}

		return releaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.ObjectInFront} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectInFrontItemProvider objectInFrontItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.ObjectInFront}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectInFrontAdapter() {
		if (objectInFrontItemProvider == null) {
			objectInFrontItemProvider = new ObjectInFrontItemProvider(this);
		}

		return objectInFrontItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.WallLeft} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WallLeftItemProvider wallLeftItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.WallLeft}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWallLeftAdapter() {
		if (wallLeftItemProvider == null) {
			wallLeftItemProvider = new WallLeftItemProvider(this);
		}

		return wallLeftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.WallRight} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WallRightItemProvider wallRightItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.WallRight}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWallRightAdapter() {
		if (wallRightItemProvider == null) {
			wallRightItemProvider = new WallRightItemProvider(this);
		}

		return wallRightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.webots.polycreate.WallFront} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WallFrontItemProvider wallFrontItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.webots.polycreate.WallFront}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWallFrontAdapter() {
		if (wallFrontItemProvider == null) {
			wallFrontItemProvider = new WallFrontItemProvider(this);
		}

		return wallFrontItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (missionItemProvider != null)
			missionItemProvider.dispose();
		if (sequenceItemProvider != null)
			sequenceItemProvider.dispose();
		if (logicalActionItemProvider != null)
			logicalActionItemProvider.dispose();
		if (alternativeSequenceItemProvider != null)
			alternativeSequenceItemProvider.dispose();
		if (rotateItemProvider != null)
			rotateItemProvider.dispose();
		if (moveForwardItemProvider != null)
			moveForwardItemProvider.dispose();
		if (grabItemProvider != null)
			grabItemProvider.dispose();
		if (releaseItemProvider != null)
			releaseItemProvider.dispose();
		if (objectInFrontItemProvider != null)
			objectInFrontItemProvider.dispose();
		if (wallLeftItemProvider != null)
			wallLeftItemProvider.dispose();
		if (wallRightItemProvider != null)
			wallRightItemProvider.dispose();
		if (wallFrontItemProvider != null)
			wallFrontItemProvider.dispose();
	}

}
